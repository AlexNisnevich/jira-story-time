// Generated by CoffeeScript 1.7.1
(function() {
  var Stories;

  window.JiraStoryTime = window.JiraStoryTime || {};

  window.JiraStoryTime.Stories = Stories = (function() {
    function Stories() {}

    Stories.current_stories = [];

    Stories.backlog_stories = {};

    Stories.fetchStories = function() {
      var params;
      params = window.JiraStoryTime.Util.deparam(location.href.split("?")[1]);
      Stories.rapidView = params["rapidView"];
      return $.ajax({
        url: "/rest/greenhopper/1.0/xboard/plan/backlog/data.json?rapidViewId=" + Stories.rapidView,
        context: document.body,
        success: Stories.parseStories
      });
    };

    Stories.parseStories = function(response) {
      Stories.backlog_stories = {};
      Stories.current_stories = $.map(response.sprints, function(sprint) {
        if (sprint.state === "ACTIVE") {
          return sprint.issuesIds;
        } else {
          return null;
        }
      });
      return response.issues.forEach(function(s) {
        if (s.typeName === "Story") {
          return Stories.backlog_stories[s.key] = new window.JiraStoryTime.Story(s);
        }
      });
    };

    Stories.epics = [];

    Stories.epicColor = function(epic) {
      var color;
      color = $.inArray(epic, window.JiraStoryTime.Stories.epics);
      if (color < 0) {
        color = Stories.addEpic(epic);
      }
      return color;
    };

    Stories.addEpic = function(epic) {
      var children, color, dom;
      color = window.JiraStoryTime.Stories.epics.length;
      window.JiraStoryTime.Stories.epics.push((epic === "None" ? "" : epic));
      $("#story_board_epics").append(window.JiraStoryTime.Templates.boardEpic);
      children = $("#story_board_epics").children();
      dom = children[children.length - 1];
      $(dom).find(".epic-name").html(epic);
      dom.setAttribute("id", "epic-" + color);
      $(dom).addClass("epic-color-" + color);
      return color;
    };

    Stories.updateEpics = function() {
      var epicPoints;
      epicPoints = {};
      $.map(Stories.backlog_stories, function(s) {
        return epicPoints[s.epicColor || 0] = (epicPoints[s.epicColor || 0] || 0) + parseInt(s.points || 0);
      });
      return $.map(epicPoints, function(v, k) {
        return $("#epic-" + k).find(".story-points").html(v);
      });
    };

    return Stories;

  })();

}).call(this);
