// Generated by CoffeeScript 1.7.1
(function() {
  var Story,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.JiraStoryTime = window.JiraStoryTime || {};

  window.JiraStoryTime.Story = Story = (function() {
    Story.id = "id";

    Story.description = "description";

    Story.summary = "summary";

    Story.business = "customfield_10003";

    Story.points = "customfield_10002";

    Story.epic = "customfield_10007";

    Story.NoPoints = "--";

    Story.devMode = false;

    Story.autoUpdate = true;

    Story.observer = function(changes) {
      return changes.forEach(function(change) {
        return change.object.render(change.name);
      });
    };

    function Story(data) {
      this.closeCard = __bind(this.closeCard, this);
      this.openCard = __bind(this.openCard, this);
      this.close = __bind(this.close, this);
      this.buildRelationShips = __bind(this.buildRelationShips, this);
      this.setPoints = __bind(this.setPoints, this);
      this.render = __bind(this.render, this);
      this.setMoreData = __bind(this.setMoreData, this);
      this.getFullStory = __bind(this.getFullStory, this);
      this.initialize = __bind(this.initialize, this);
      this.data = data;
      this.linkedIssues = [];
      this.isOpen = false;
    }

    Story.prototype.initialize = function(el) {
      var dom;
      el.append(window.JiraStoryTime.Templates.boardStory);
      dom = el[0].lastChild;
      dom.setAttribute("data-story-id", this.data.id);
      dom.setAttribute("id", "story-" + this.data.id);
      this.isCurrent = $.inArray(this.data.id, window.JiraStoryTime.Stories.current_stories) > -1;
      dom.setAttribute("draggable", !this.isCurrent);
      $(dom).click((function(_this) {
        return function() {
          if (_this.isOpen) {
            return _this.closeCard(dom);
          } else {
            return _this.openCard(dom);
          }
        };
      })(this));
      $(dom).on("pointsChanged", this, function(e, newPoints) {
        return e.data.setPoints(newPoints);
      });
      Object.observe(this, Story.observer);
      this.id = this.data.id;
      this.key = this.data.key;
      this.summary = this.data.summary;
      this.points = this.data.estimateStatistic.statFieldValue.value;
      this.getFullStory();
      if (Story.autoUpdate === true) {
        return this.myInterval = setInterval(this.getFullStory, 10000 + Math.random() * 5000);
      }
    };

    Story.prototype.getFullStory = function() {
      return $.ajax({
        url: "/rest/greenhopper/1.0/xboard/issue/details.json?issueIdOrKey=" + this.id + "&loadSubtasks=true&rapidViewId=" + window.JiraStoryTime.Stories.rapidView,
        context: this
      }).done(this.setMoreData);
    };

    Story.prototype.setMoreData = function(data) {
      this.moreData = data;
      data.fields.forEach((function(_this) {
        return function(f) {
          switch (f.id) {
            case Story.summary:
              return _this.summary = f.value;
            case Story.points:
              return _this.setPoints(f.value || "");
            case Story.business:
              return _this.business = f.value || "";
            case Story.description:
              return _this.description = f.html;
            case Story.epic:
              return _this.epicColor = window.JiraStoryTime.Stories.epicColor(f.text);
          }
        };
      })(this));
      return this.buildRelationShips();
    };

    Story.prototype.render = function(changed_field) {
      var action, col, el, pts;
      el = $("#story-" + this.data.id);
      col = el.parent().parent();
      el.find(".story-" + changed_field).html(this[changed_field]);
      if (changed_field === "linkedStatus") {
        el.attr("data-content", this.linkedStatus);
        action = (this.linkedStatus == null ? "removeClass" : "addClass");
        el[action]("linked-story");
        if (this.linkedStatus === "Blocker") {
          el[action]("story-blocker");
        } else {
          if (this.linkedStatus === "Frees") {
            el[action]("story-frees");
          }
        }
      }
      if (changed_field === "epicColor") {
        el.addClass("epic-color-" + this.epicColor);
      }
      if (changed_field === "points") {
        pts = (this.points === "" ? Story.NoPoints : this.points);
        $("#story-points-" + pts).addClass("has-stories");
        $("#story-points-" + pts).find((this.isCurrent ? ".current-stories" : ".backlog-stories")).append(el);
        if (col.find(".backlog-stories").children().length === 0 && col.find(".current-stories").children().length === 0) {
          col.removeClass("has-stories");
        }
        return $("#story_board").css("min-width", ($(".has-stories").length * 300) + "px");
      }
    };

    Story.prototype.setPoints = function(newPoints) {
      this.points = (newPoints === Story.NoPoints ? "" : newPoints);
      if (Story.devMode !== true) {
        $.ajax({
          url: "/rest/greenhopper/1.0/xboard/issue/update-field.json",
          context: document.body,
          type: "PUT",
          headers: {
            "Content-Type": "application/json"
          },
          data: "{\"fieldId\": \"" + Story.points + "\", \"issueIdOrKey\": " + this.id + ", \"newValue\": \"" + this.points + "\"}"
        }).done(function(response) {
          console.log(response);
        });
      }
      return window.JiraStoryTime.Stories.updateEpics();
    };

    Story.prototype.buildRelationShips = function() {
      this.linkedIssues = [];
      return this.moreData.issueLinks.issueLinkTypeEntries.forEach((function(_this) {
        return function(typeEntry) {
          var issueType;
          issueType = typeEntry.relationship;
          if (issueType === "is blocked by") {
            issueType = "Blocker";
          } else {
            if (issueType === "blocks") {
              issueType = "Frees";
            }
          }
          return typeEntry.issueLinkEntries.forEach(function(issue) {
            return _this.linkedIssues.push({
              type: issueType,
              story: window.JiraStoryTime.Stories.backlog_stories[issue.title],
              key: issue.title
            });
          });
        };
      })(this));
    };

    Story.prototype.close = function() {
      return clearInterval(this.myInterval);
    };

    Story.prototype.openCard = function(dom) {
      this.isOpen = true;
      $(dom).find('.story-description').show();
      return this.linkedIssues.forEach((function(_this) {
        return function(issue) {
          if (issue.story != null) {
            return issue.story.linkedStatus = issue.type;
          }
        };
      })(this));
    };

    Story.prototype.closeCard = function(dom) {
      this.isOpen = false;
      $(dom).find('.story-description').hide();
      return this.linkedIssues.forEach((function(_this) {
        return function(issue) {
          if (issue.story != null) {
            return delete issue.story.linkedStatus;
          }
        };
      })(this));
    };

    return Story;

  })();

}).call(this);
